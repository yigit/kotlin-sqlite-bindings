# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  # Allow precise monitoring of the save/restore of Gradle User Home by `gradle-build-action`
  # See https://github.com/marketplace/actions/gradle-build-action?version=v2.1.1#cache-debugging-and-analysis
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup machine
        uses: ./.github/actions/commonSetup
        with:
          gradleCacheKey: ${{ secrets.GCP_ACCOUNT }}
          gradleCachePush: true
      - name: build and test
        id: gradle-build-and-test
        run: ./gradlew allTests --stacktrace --scan
        env:
          GRADLE_CACHE_KEY: ${{ secrets.GCP_ACCOUNT }}
          GRADLE_CACHE_PUSH: true
      - name: Build Scan for Test
        shell: bash
        run: echo "::notice title=Build and Test scan::${{ steps.gradle-build-and-test.outputs.build-scan-url }}"
      - name: run spotless on build plugin
        run: ./gradlew -p buildPlugin spotlessCheck --stacktrace
        env:
          GRADLE_CACHE_KEY: ${{ secrets.GCP_ACCOUNT }}
          GRADLE_CACHE_PUSH: true
      - name: run spotless
        run: ./gradlew spotlessCheck --stacktrace
        env:
          GRADLE_CACHE_KEY: ${{ secrets.GCP_ACCOUNT }}
          GRADLE_CACHE_PUSH: true
      - name: stop daemon
        run: ./gradlew --stop
      - name: build dist
        id: gradle-build-dist
        run: ./gradlew buildOnServer packageDebugAndroidTest --stacktrace --scan
        env:
          GRADLE_CACHE_KEY: ${{ secrets.GCP_ACCOUNT }}
          GRADLE_CACHE_PUSH: true
      - name: Build Scan for Dist
        shell: bash
        run: echo "::notice title=Dist Scan::${{ steps.gradle-build-dist.outputs.build-scan-url }}"
      - name: Upload test results for sqlitebindings
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: sqlitebindings-test-reports
          path: sqlitebindings/build/reports
      - name: Upload test results for ksqlite3
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ksqlite3-test-reports
          path: ksqlite3/build/reports
      - name: Upload JNI failures
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ksqlite3-jni-errors
          path: ksqlite3/hs_err*
      - name: Upload Dist
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-dist
          path: build/dist
      - name: Upload apks
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: test apks of ${{ runner.os }}
          path: ./**/build/*.apk
  androidTests:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup machine
        uses: ./.github/actions/commonSetup
        with:
          gradleCacheKey: ${{ secrets.GCP_ACCOUNT }}
          gradleCachePush: true
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-caches
      # we are not using matrix build here as the overhead of the build is a lot, no reason to spend unnecessary CI
      # resources even though matrix would be faster.
      - name: Asemble Android Test
        id: assemble-android-test
        run: ./gradlew packageDebugAndroidTest --scan
        env:
          GRADLE_CACHE_KEY: ${{ secrets.GCP_ACCOUNT }}
          GRADLE_CACHE_PUSH: true
      - name: Build Scan for Assemble Android Test
        shell: bash
        run: echo "::notice title=Dist Scan::${{ steps.assemble-android-test.outputs.build-scan-url }}"
      - name: API 21
        uses: ./.github/actions/androidTest
        with:
          apiLevel: 21
      - name: API 24
        uses: ./.github/actions/androidTest
        with:
          apiLevel: 24
      - name: API 27
        uses: ./.github/actions/androidTest
        with:
          apiLevel: 27
      - name: API 29
        uses: ./.github/actions/androidTest
        with:
          apiLevel: 29
      - name: API 31
        uses: ./.github/actions/androidTest
        with:
          apiLevel: 31
      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: android test results
          path: ./**/build/reports
  buildFinalArtifacts:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup machine
        uses: ./.github/actions/commonSetup
        with:
          gradleCacheKey: ${{ secrets.GCP_ACCOUNT }}
          gradleCachePush: true
      # ubuntu-latest, macos-latest, windows-latest -> should match the strategies of build
      - name: Download linux dist
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-dist
          path: artifacts/linux
      - name: Download mac dist
        uses: actions/download-artifact@v2
        with:
          name: macos-latest-dist
          path: artifacts/mac 
      - name: Download windows dist
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-dist
          path: artifacts/windows
      - name: test and publish
        id: gradle-test-and-dist
        run: DIST_OUTPUTS=artifacts ./gradlew jvmTest createCombinedRepo  --info --stacktrace --scan
        env:
          GRADLE_CACHE_KEY: ${{ secrets.GCP_ACCOUNT }}
          GRADLE_CACHE_PUSH: true
      - name: Build Dist And Test Scan
        shell: bash
        run: echo "::notice title=Build and Dist Scan::${{ steps.gradle-test-and-dist.outputs.build-scan-url }}"
      - name: Upload Repo
        uses: actions/upload-artifact@v2
        with:
          name: combined-repo
          path: build/dist/combinedRepo
